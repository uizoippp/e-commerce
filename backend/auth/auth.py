from datetime import datetime, timedelta
from jose import JWTError, jwt
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from database import get_db, user

# C·∫•u h√¨nh m√£ h√≥a token
SECRET_KEY = "matkhau"  # üîí ƒë·ªïi th√†nh key b·∫£o m·∫≠t
ALGORITHM = "HS256"

# FastAPI s·∫Ω t·ª± ki·ªÉm tra header "Authorization: Bearer <token>"
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="user/signin")

def create_access_token(data: dict):
    """
    T·∫°o JWT kh√¥ng c√≥ th·ªùi gian h·∫øt h·∫°n.
    """
    to_encode = data.copy()
    token = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return token

# X√°c th·ª±c token t·ª´ ng∆∞·ªùi d√πng
def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Kh√¥ng th·ªÉ x√°c th·ª±c token",
        headers={"Authorization": "Bearer "},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user_data = db.query(user).filter(user.id == user_id).first()
    if user_data is None:
        raise credentials_exception
    return user_data
